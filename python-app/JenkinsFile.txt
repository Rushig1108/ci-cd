pipeline {
    agent any
    environment {
        SONAR_URL = "http://localhost:9000" // Update with your SonarQube server URL
        DOCKER_IMAGE = "rushigunjal1108/ci-cd-python-app:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred') // Docker Hub credentials in Jenkins
    }
    stages {
        stage('Checkout') {
            steps {
                sh 'echo Checking out the code...'
                // Uncomment the next line to actually pull code from your repository
               // git branch: 'main', url: 'https://github.com/Rushig1108/ci-cd.git'
            }
        }

        stage('Install Dependencies and Test') {
            steps {
                sh '''
                    python -m venv venv
                    . venv/bin/activate
                    pip install -r requirements.txt
                    python -m unittest discover
                '''
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        . venv/bin/activate
                        sonar-scanner \
                          -Dsonar.projectKey=ci-cd-tutorial-sample-app \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${SONAR_URL} \
                          -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "ci-cd"
                GIT_USER_NAME = "Rushig1108"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "rushigunjal17@gmail.com"
                        git config user.name "Rushikesh"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" python-app/k8-manifests/Deployment.yaml
                        git add python-app/k8-manifests/Deployment.yaml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up workspace'
            deleteDir() // Clean up workspace after build
        }
    }
}
